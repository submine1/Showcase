<Page
    x:Class="Showcase1.Page4_WCF"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:Showcase1"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">
    <Grid Background="White">
        <StackPanel Orientation="Vertical">
            <TextBlock Text="WCF" FontSize="26" Foreground="#FF414141"/>
            <Border Background="Yellow" Margin="0,10,0,0" HorizontalAlignment="Left">
                <TextBlock Text="Note: The features on this page require the Professional Edition of C#/XAML for HTML5. For more information, please visit http://www.cshtml5.com" Margin="10" TextWrapping="Wrap" Width="240" FontSize="12" HorizontalAlignment="Left"/>
            </Border>
            <TextBlock Text="SOAP Web Services" Margin="0,50,0,0" FontSize="26" Foreground="#FF414141"/>
            <TextBlock Text="C#/XAML for HTML5 supports the &quot;Add Service Reference&quot; feature of Visual Studio that enables to easily communicate with SOAP web services. Some of the advantages of REST include string typing, due to the fact that the proxies for the web methods are automatically generated and the objects are automatically serialized/deserialized." Foreground="#FF808080" Margin="0,10,0,0" TextWrapping="Wrap" Width="280" FontSize="12" HorizontalAlignment="Left"/>
            <TextBlock Text="Please read the WCF Limitations and Tutorials at the following page:" Foreground="#FF808080" Margin="0,10,0,0" TextWrapping="Wrap" Width="280" FontSize="12" HorizontalAlignment="Left"/>
            <TextBlock Text="http://cshtml5.com/links/wcf-limitations-and-tutorials.aspx" Foreground="#FF808080" Margin="0,10,0,0" TextWrapping="Wrap" Width="280" FontSize="12" HorizontalAlignment="Left"/>
            <TextBlock Text="The sample below shows an online To-Do application based on SOAP web services (WCF Service Application):" Foreground="#FF808080" Margin="0,10,0,0" TextWrapping="Wrap" Width="280" FontSize="12" HorizontalAlignment="Left"/>
            <TextBlock Text="CREATE A NEW TO-DO:" Margin="0,20,0,0" Foreground="Black" HorizontalAlignment="Left"/>
            <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                <TextBox x:Name="SoapToDoTextBox" Width="200" Text="Enter your To-Do here" Foreground="Black" Background="#FFEEEEEE"/>
                <Button Content="Create" Click="ButtonAddSoapToDo_Click" Foreground="White" Background="#FFE44D26" Margin="5,0,0,0"/>
            </StackPanel>
            <TextBlock Text="LIST OF TODO's:" Margin="0,20,0,0" Foreground="Black" HorizontalAlignment="Left"/>
            <ItemsControl x:Name="SoapToDosItemsControl" HorizontalAlignment="Left">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                            <TextBlock Text="{Binding Description}" Foreground="Black"/>
                            <Button Content="Delete" Click="ButtonDeleteSoapToDo_Click" Foreground="White" Background="#FFE44D26" Margin="5,0,0,0"/>
                        </StackPanel>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
            <Button Content="Refresh the list" Foreground="White" Background="#FFE44D26" Click="ButtonRefreshSoapToDos_Click" HorizontalAlignment="Left" Margin="0,10,0,0"/>
            <Button Content="[view/hide source code]" Margin="0,10,0,0" Foreground="#FF888888" HorizontalAlignment="Left" Click="ViewHideSourceCodeForSoapDemo_Click"/>
            <Border x:Name="SourceCodeForSoapDemo" Background="#FFE7E7E7" Margin="0,20,0,0" HorizontalAlignment="Left" Visibility="Collapsed">
                <StackPanel Orientation="Vertical" Margin="5">
                    <TextBlock FontSize="11" Margin="0,3,0,0" Foreground="#FF606060" Text="//&#160;The&#160;&quot;soapClient&#160;&quot;&#160;was&#160;generated&#160;using&#160;the&#160;&quot;Add&#160;Service&#160;Reference&quot;&#160;feature&#160;of&#160;Visual&#160;Studio:&#x0a;Service1Client&#160;_soapClient&#160;=&#160;new&#160;Service1Client(new&#160;BasicHttpBinding(),&#160;new&#160;EndpointAddress(new&#160;Uri(&quot;http://yourdomain/Service1.svc&quot;)));&#x0a;&#x0a;async&#160;Task&#160;RefreshSoapToDos()&#x0a;{&#x0a;&#160;&#160;&#160;&#160;var&#160;result&#160;=&#160;await&#160;_soapClient.GetToDosAsync(_ownerId);&#x0a;&#160;&#160;&#160;&#160;ToDoItem[]&#160;todos&#160;=&#160;result.Body.GetToDosResult;&#x0a;&#160;&#160;&#160;&#160;SoapToDosItemsControl.ItemsSource&#160;=&#160;todos;&#x0a;}&#x0a;&#x0a;async&#160;void&#160;ButtonRefreshSoapToDos_Click(object&#160;sender,&#160;RoutedEventArgs&#160;e)&#x0a;{&#x0a;&#160;&#160;&#160;&#160;//&#160;Disable&#160;the&#160;button:&#x0a;&#160;&#160;&#160;&#160;var&#160;button&#160;=&#160;(Button)sender;&#x0a;&#160;&#160;&#160;&#160;button.Content&#160;=&#160;&quot;Please&#160;wait...&quot;;&#x0a;&#160;&#160;&#160;&#160;button.IsEnabled&#160;=&#160;false;&#x0a;&#x0a;&#160;&#160;&#160;&#160;//&#160;Make&#160;the&#160;async&#160;call&#160;to&#160;the&#160;server:&#x0a;&#160;&#160;&#160;&#160;await&#160;RefreshSoapToDos();&#x0a;&#x0a;&#160;&#160;&#160;&#160;//&#160;Re-enable&#160;the&#160;button:&#x0a;&#160;&#160;&#160;&#160;button.IsEnabled&#160;=&#160;true;&#x0a;&#160;&#160;&#160;&#160;button.Content&#160;=&#160;&quot;Refresh&#160;the&#160;list&quot;;&#x0a;}&#x0a;&#x0a;async&#160;void&#160;ButtonAddSoapToDo_Click(object&#160;sender,&#160;RoutedEventArgs&#160;e)&#x0a;{&#x0a;&#160;&#160;&#160;&#160;//&#160;Disable&#160;the&#160;button:&#x0a;&#160;&#160;&#160;&#160;var&#160;button&#160;=&#160;(Button)sender;&#x0a;&#160;&#160;&#160;&#160;button.Content&#160;=&#160;&quot;Please&#160;wait...&quot;;&#x0a;&#160;&#160;&#160;&#160;button.IsEnabled&#160;=&#160;false;&#x0a;&#x0a;&#160;&#160;&#160;&#160;//&#160;Create&#160;the&#160;new&#160;to-do:&#x0a;&#160;&#160;&#160;&#160;ToDoItem&#160;todo&#160;=&#160;new&#160;ToDoItem()&#x0a;&#160;&#160;&#160;&#160;{&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Description&#160;=&#160;SoapToDoTextBox.Text,&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Id&#160;=&#160;Guid.NewGuid(),&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;OwnerId&#160;=&#160;_ownerId&#x0a;&#160;&#160;&#160;&#160;};&#x0a;&#x0a;&#160;&#160;&#160;&#160;//&#160;Make&#160;the&#160;async&#160;call&#160;to&#160;the&#160;server:&#x0a;&#160;&#160;&#160;&#160;await&#160;_soapClient.AddOrUpdateToDoAsync(todo);&#x0a;&#x0a;&#160;&#160;&#160;&#160;//&#160;Refresh&#160;the&#160;list:&#x0a;&#160;&#160;&#160;&#160;await&#160;RefreshSoapToDos();&#x0a;&#x0a;&#160;&#160;&#160;&#160;//&#160;Re-enable&#160;the&#160;button:&#x0a;&#160;&#160;&#160;&#160;button.IsEnabled&#160;=&#160;true;&#x0a;&#160;&#160;&#160;&#160;button.Content&#160;=&#160;&quot;Create&quot;;&#x0a;}&#x0a;&#x0a;async&#160;void&#160;ButtonDeleteSoapToDo_Click(object&#160;sender,&#160;RoutedEventArgs&#160;e)&#x0a;{&#x0a;&#160;&#160;&#160;&#160;//&#160;Disable&#160;the&#160;button:&#x0a;&#160;&#160;&#160;&#160;var&#160;button&#160;=&#160;(Button)sender;&#x0a;&#160;&#160;&#160;&#160;button.Content&#160;=&#160;&quot;Please&#160;wait...&quot;;&#x0a;&#160;&#160;&#160;&#160;button.IsEnabled&#160;=&#160;false;&#x0a;&#x0a;&#160;&#160;&#160;&#160;//&#160;Non-generic&#160;fault&#160;exceptions&#160;are&#160;handled:&#x0a;&#160;&#160;&#160;&#160;try&#x0a;&#160;&#160;&#160;&#160;{&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ToDoItem&#160;todo&#160;=&#160;(ToDoItem)((Button)sender).DataContext;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;await&#160;_soapClient.DeleteToDoAsync(todo);&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ButtonRefreshSoapToDos_Click(sender,&#160;e);&#x0a;&#160;&#160;&#160;&#160;}&#x0a;&#160;&#160;&#160;&#160;catch&#160;(FaultException&#160;ex)&#x0a;&#160;&#160;&#160;&#160;{&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#160;With&#160;Fault&#160;Exceptions&#160;the&#160;server&#160;can&#160;pass&#160;to&#160;the&#160;client&#160;some&#160;deliberate&#160;information&#160;such&#160;as&#160;&quot;Item&#160;not&#160;found&quot;:&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;MessageBox.Show(ex.Message);&#x0a;&#160;&#160;&#160;&#160;}&#x0a;&#x0a;&#160;&#160;&#160;&#160;//&#160;Re-enable&#160;the&#160;button:&#x0a;&#160;&#160;&#160;&#160;button.IsEnabled&#160;=&#160;true;&#x0a;&#160;&#160;&#160;&#160;button.Content&#160;=&#160;&quot;Delete&quot;;&#x0a;}"/>
                </StackPanel>
            </Border>
            <TextBlock Text="REST Web Services" Margin="0,50,0,0" FontSize="26" Foreground="#FF414141"/>
            <TextBlock Text="You can use the &quot;WebClient&quot; class to easily communicate with REST web services." Foreground="#FF808080" Margin="0,10,0,0" TextWrapping="Wrap" Width="280" FontSize="12" HorizontalAlignment="Left"/>
            <TextBlock Text="The sample below shows an online To-Do application based on REST web services (ASP.NET Web API):" Foreground="#FF808080" Margin="0,10,0,0" TextWrapping="Wrap" Width="280" FontSize="12" HorizontalAlignment="Left"/>
            <TextBlock Text="CREATE A NEW TO-DO:" Margin="0,20,0,0" Foreground="Black" HorizontalAlignment="Left"/>
            <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                <TextBox x:Name="RestToDoTextBox" Width="200" Text="Enter your To-Do here" Foreground="Black" Background="#FFEEEEEE"/>
                <Button Content="Create" Click="ButtonAddRestToDo_Click" Foreground="White" Background="#FFE44D26" Margin="5,0,0,0"/>
            </StackPanel>
            <TextBlock Text="LIST OF TODO's:" Margin="0,20,0,0" Foreground="Black" HorizontalAlignment="Left"/>
            <ItemsControl x:Name="RestToDosItemsControl" HorizontalAlignment="Left">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                            <TextBlock Text="{Binding Description}" Foreground="Black"/>
                            <Button Content="Delete" Click="ButtonDeleteRestToDo_Click" Foreground="White" Background="#FFE44D26" Margin="5,0,0,0"/>
                        </StackPanel>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
            <Button Content="Refresh the list" Foreground="White" Background="#FFE44D26" Click="ButtonRefreshRestToDos_Click" HorizontalAlignment="Left" Margin="0,10,0,0"/>
            <Button Content="[view/hide source code]" Margin="0,10,0,0" Foreground="#FF888888" HorizontalAlignment="Left" Click="ViewHideSourceCodeForWebClientDemo_Click"/>
            <Border x:Name="SourceCodeForWebClientDemo" Background="#FFE7E7E7" Margin="0,20,0,0" HorizontalAlignment="Left" Visibility="Collapsed">
                <StackPanel Orientation="Vertical" Margin="5">
                    <TextBlock FontSize="11" Margin="0,3,0,0" Foreground="#FF606060" Text="async&#160;Task&#160;RefreshRestToDos()&#x0a;{&#x0a;&#160;&#160;&#160;var&#160;webClient&#160;=&#160;new&#160;WebClient();&#x0a;&#160;&#160;&#160;webClient.Encoding&#160;=&#160;Encoding.UTF8;&#x0a;&#160;&#160;&#160;webClient.Headers[HttpRequestHeader.Accept]&#160;=&#160;&quot;application/xml&quot;;&#x0a;&#x0a;&#160;&#160;&#160;string&#160;response&#160;=&#160;await&#160;webClient.DownloadStringTaskAsync(&quot;http://yourdomain/api/Todo?OwnerId=&quot;&#160;+&#160;_ownerId.ToString());&#x0a;&#x0a;&#160;&#160;&#160;response&#160;=&#160;response.Replace(@&quot;xmlns=&quot;&quot;http://schemas.datacontract.org/2004/07/DotNetForHtml5.Showcase.SampleRestWebService.Models&quot;&quot;&quot;,&#160;&quot;&quot;);&#x0a;&#160;&#160;&#160;response&#160;=&#160;&quot;&lt;ToDoItemsWrapper&gt;&quot;&#160;+&#160;response.Replace(&quot;ArrayOfToDoItem&quot;,&#160;&quot;ToDoItems&quot;)&#160;+&#160;&quot;&lt;/ToDoItemsWrapper&gt;&quot;;&#160;//&#160;Workaround&#160;for&#160;the&#160;fact&#160;that&#160;&quot;ArrayOf&quot;&#160;types&#160;cannot&#160;be&#160;directly&#160;deserialized&#160;by&#160;the&#160;XmlSerializer&#160;in&#160;this&#160;Beta&#160;version.&#x0a;&#160;&#160;&#160;var&#160;deserializer&#160;=&#160;new&#160;XmlSerializer(typeof(ToDoItemsWrapper));&#x0a;&#160;&#160;&#160;var&#160;memoryStream&#160;=&#160;new&#160;MemoryStream(Encoding.UTF8.GetBytes(response));&#x0a;&#160;&#160;&#160;var&#160;xmlReader&#160;=&#160;XmlReader.Create(memoryStream);&#x0a;&#160;&#160;&#160;ToDoItemsWrapper&#160;items&#160;=&#160;(ToDoItemsWrapper)deserializer.Deserialize(xmlReader);&#x0a;&#160;&#160;&#160;RestToDosItemsControl.ItemsSource&#160;=&#160;items.ToDoItems;&#x0a;}&#x0a;&#x0a;async&#160;void&#160;ButtonRefreshRestToDos_Click(object&#160;sender,&#160;RoutedEventArgs&#160;e)&#x0a;{&#x0a;&#160;&#160;&#160;//&#160;Disable&#160;the&#160;button:&#x0a;&#160;&#160;&#160;var&#160;button&#160;=&#160;(Button)sender;&#x0a;&#160;&#160;&#160;button.Content&#160;=&#160;&quot;Please&#160;wait...&quot;;&#x0a;&#160;&#160;&#160;button.IsEnabled&#160;=&#160;false;&#x0a;&#x0a;&#160;&#160;&#160;//&#160;Make&#160;the&#160;async&#160;call&#160;to&#160;the&#160;server:&#x0a;&#160;&#160;&#160;await&#160;RefreshRestToDos();&#x0a;&#x0a;&#160;&#160;&#160;//&#160;Re-enable&#160;the&#160;button:&#x0a;&#160;&#160;&#160;button.IsEnabled&#160;=&#160;true;&#x0a;&#160;&#160;&#160;button.Content&#160;=&#160;&quot;Refresh&#160;the&#160;list&quot;;&#x0a;}&#x0a;&#x0a;async&#160;void&#160;ButtonAddRestToDo_Click(object&#160;sender,&#160;RoutedEventArgs&#160;e)&#x0a;{&#x0a;&#160;&#160;&#160;//&#160;Disable&#160;the&#160;button:&#x0a;&#160;&#160;&#160;var&#160;button&#160;=&#160;(Button)sender;&#x0a;&#160;&#160;&#160;button.Content&#160;=&#160;&quot;Please&#160;wait...&quot;;&#x0a;&#160;&#160;&#160;button.IsEnabled&#160;=&#160;false;&#x0a;&#x0a;&#160;&#160;&#160;string&#160;data&#160;=&#160;string.Format(@&quot;{{&quot;&quot;OwnerId&quot;&quot;:&#160;&quot;&quot;{0}&quot;&quot;,&quot;&quot;Id&quot;&quot;:&#160;&quot;&quot;{1}&quot;&quot;,&quot;&quot;Description&quot;&quot;:&#160;&quot;&quot;{2}&quot;&quot;}}&quot;,&#160;_ownerId,&#160;Guid.NewGuid(),&#160;RestToDoTextBox.Text.Replace(&quot;\&quot;&quot;,&#160;&quot;&apos;&quot;));&#x0a;&#160;&#160;&#160;var&#160;webClient&#160;=&#160;new&#160;WebClient();&#x0a;&#160;&#160;&#160;webClient.Headers[HttpRequestHeader.ContentType]&#160;=&#160;&quot;application/json&quot;;&#x0a;&#160;&#160;&#160;webClient.Encoding&#160;=&#160;Encoding.UTF8;&#x0a;&#160;&#160;&#160;string&#160;response&#160;=&#160;await&#160;webClient.UploadStringTaskAsync(&quot;http://yourdomain/api/Todo/&quot;,&#160;&quot;POST&quot;,&#160;data);&#x0a;&#x0a;&#160;&#160;&#160;await&#160;RefreshRestToDos();&#x0a;&#x0a;&#160;&#160;&#160;//&#160;Re-enable&#160;the&#160;button:&#x0a;&#160;&#160;&#160;button.IsEnabled&#160;=&#160;true;&#x0a;&#160;&#160;&#160;button.Content&#160;=&#160;&quot;Create&quot;;&#x0a;}&#x0a;&#x0a;async&#160;void&#160;ButtonDeleteRestToDo_Click(object&#160;sender,&#160;RoutedEventArgs&#160;e)&#x0a;{&#x0a;&#160;&#160;&#160;//&#160;Disable&#160;the&#160;button:&#x0a;&#160;&#160;&#160;var&#160;button&#160;=&#160;(Button)sender;&#x0a;&#160;&#160;&#160;button.Content&#160;=&#160;&quot;Please&#160;wait...&quot;;&#x0a;&#160;&#160;&#160;button.IsEnabled&#160;=&#160;false;&#x0a;&#x0a;&#160;&#160;&#160;ToDoItem&#160;todo&#160;=&#160;(ToDoItem)((Button)sender).DataContext;&#x0a;&#160;&#160;&#160;var&#160;webClient&#160;=&#160;new&#160;WebClient();&#x0a;&#160;&#160;&#160;string&#160;response&#160;=&#160;await&#160;webClient.UploadStringTaskAsync(&quot;http://yourdomain/api/Todo/&quot;&#160;+&#160;todo.Id.ToString()&#160;+&#160;&quot;?OwnerId=&quot;&#160;+&#160;_ownerId.ToString(),&#160;&quot;DELETE&quot;,&#160;&quot;&quot;);&#x0a;&#x0a;&#160;&#160;&#160;await&#160;RefreshRestToDos();&#x0a;&#x0a;&#160;&#160;&#160;//&#160;Re-enable&#160;the&#160;button:&#x0a;&#160;&#160;&#160;button.IsEnabled&#160;=&#160;true;&#x0a;&#160;&#160;&#160;button.Content&#160;=&#160;&quot;Delete&quot;;&#x0a;}&#x0a;&#x0a;[DataContract]&#x0a;public&#160;class&#160;ToDoItem&#x0a;{&#x0a;&#160;&#160;&#160;public&#160;Guid&#160;Id&#160;{&#160;get;&#160;set;&#160;}&#x0a;&#160;&#160;&#160;public&#160;Guid&#160;OwnerId&#160;{&#160;get;&#160;set;&#160;}&#x0a;&#160;&#160;&#160;public&#160;string&#160;Description&#160;{&#160;get;&#160;set;&#160;}&#x0a;&#x0a;//&#160;Workaround&#160;for&#160;the&#160;fact&#160;that&#160;&quot;ArrayOf&quot;&#160;types&#160;cannot&#160;be&#160;directly&#160;deserialized&#160;by&#160;the&#160;XmlSerializer&#160;in&#160;this&#160;Beta&#160;version:&#x0a;[DataContract]&#x0a;public&#160;class&#160;ToDoItemsWrapper&#x0a;{&#x0a;&#160;&#160;&#160;public&#160;List&lt;ToDoItem&gt;&#160;ToDoItems&#160;{&#160;get;&#160;set;&#160;}&#x0a;}"/>
                </StackPanel>
            </Border>
            <Border x:Name="Footer" Height="120"/>
        </StackPanel>
    </Grid>
</Page>
