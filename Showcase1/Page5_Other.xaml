<Page
    x:Class="Showcase1.Page5_Other"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:Showcase1"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">
    <Grid Background="White">
        <StackPanel Orientation="Vertical">
            <TextBlock Text="OTHER" FontSize="26" Foreground="#FF414141"/>
            <TextBlock Text="DispatcherTimer" Margin="0,50,0,0" FontSize="26" Foreground="#FF414141"/>
            <StackPanel Orientation="Horizontal" Margin="0,10,0,0" >
                <Button Content="Click to Start" Foreground="White" Background="#FFE44D26" VerticalAlignment="Top" Click="ButtonToStartTimer_Click"/>
                <Button Content="Click to Stop" Margin="5,0,0,0" Foreground="White" Background="#FFE44D26" VerticalAlignment="Top" Click="ButtonToStopTimer_Click"/>
                <TextBlock x:Name="CounterTextBlock" Margin="10,0,0,0" FontSize="26" Foreground="#FF414141" VerticalAlignment="Top"/>
            </StackPanel>
            <Button Content="[view/hide source code]" Margin="0,5,0,0" Foreground="#FF888888" HorizontalAlignment="Left" Click="ViewHideSourceCodeForTimerDemo_Click"/>
            <Border x:Name="SourceCodeForTimerDemo" Background="#FFE7E7E7" Margin="0,10,0,0" HorizontalAlignment="Left" Visibility="Collapsed">
                <StackPanel Orientation="Vertical" Margin="5">
                    <TextBlock Text="XAML CODE:" FontSize="11" Foreground="#FFAD776B"/>
                    <TextBlock FontSize="11" Margin="0,3,0,0" Foreground="#FF606060" Text="&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt;&#x0a;&#160;&#160;&#160;&lt;Button Content=&quot;Click to Start&quot; Background=&quot;#FFE44D26&quot; Click=&quot;ButtonToStartTimer_Click&quot;/&gt;&#x0a;&#160;&#160;&#160;&lt;Button Content=&quot;Click to Stop&quot; Background=&quot;#FFE44D26&quot; Click=&quot;ButtonToStopTimer_Click&quot;/&gt;&#x0a;&#160;&#160;&#160;&lt;TextBlock Text=&quot;0&quot; x:Name=&quot;CounterTextBlock&quot; FontSize=&quot;26&quot;/&gt;&#x0a;&lt;/StackPanel&gt;"/>
                    <TextBlock Text="C# CODE:" Margin="0,5,0,0" FontSize="11" Foreground="#FFAD776B"/>
                    <TextBlock FontSize="11" Margin="0,3,0,0" Foreground="#FF606060" Text="_dispatcherTimer = new DispatcherTimer() { Interval = new TimeSpan(0, 0, 0, 0, 100) };&#x0a;_dispatcherTimer.Tick += OnTick;&#x0a;&#x0a;void ButtonToStartTimer_Click(object s, RoutedEventArgs e)&#x0a;{&#x0a;&#160;&#160;&#160;_dispatcherTimer.Start();&#x0a;}&#x0a;&#x0a;void ButtonToStopTimer_Click(object s, RoutedEventArgs e)&#x0a;{&#x0a;&#160;&#160;&#160;_dispatcherTimer.Stop();&#x0a;}&#x0a;&#x0a;void OnTick(object s, object e)&#x0a;{&#x0a;&#160;&#160;&#160;CounterTextBlock.Text = (int.Parse(CounterTextBlock.Text) + 1).ToString();&#x0a;}"/>
                </StackPanel>
            </Border>
            <TextBlock Text="Animations" Margin="0,50,0,0" FontSize="26" Foreground="#FF414141"/>
            <Canvas x:Name="CanvasForAnimationsDemo" Width="350" Height="50" HorizontalAlignment="Left" Margin="0,10,0,0">
                <Canvas.Resources>
                    <Storyboard x:Key="AnimationToOpen">
                        <DoubleAnimation Duration="0:0:1" To="70" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)" Storyboard.TargetName="Item1">
                            <DoubleAnimation.EasingFunction>
                                <QuarticEase EasingMode="EaseOut"/>
                            </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>
                        <DoubleAnimation Duration="0:0:1" To="140" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)" Storyboard.TargetName="Item2">
                            <DoubleAnimation.EasingFunction>
                                <QuarticEase EasingMode="EaseOut"/>
                            </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>
                        <DoubleAnimation Duration="0:0:1" To="210" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)" Storyboard.TargetName="Item3">
                            <DoubleAnimation.EasingFunction>
                                <QuarticEase EasingMode="EaseOut"/>
                            </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>
                        <DoubleAnimation Duration="0:0:1" To="280" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)" Storyboard.TargetName="Item4">
                            <DoubleAnimation.EasingFunction>
                                <QuarticEase EasingMode="EaseOut"/>
                            </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>
                    </Storyboard>
                    <Storyboard x:Key="AnimationToClose">
                        <DoubleAnimation Duration="0:0:1" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)" Storyboard.TargetName="Item1">
                            <DoubleAnimation.EasingFunction>
                                <QuarticEase EasingMode="EaseOut"/>
                            </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>
                        <DoubleAnimation Duration="0:0:1" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)" Storyboard.TargetName="Item2">
                            <DoubleAnimation.EasingFunction>
                                <QuarticEase EasingMode="EaseOut"/>
                            </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>
                        <DoubleAnimation Duration="0:0:1" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)" Storyboard.TargetName="Item3">
                            <DoubleAnimation.EasingFunction>
                                <QuarticEase EasingMode="EaseOut"/>
                            </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>
                        <DoubleAnimation Duration="0:0:1" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)" Storyboard.TargetName="Item4">
                            <DoubleAnimation.EasingFunction>
                                <QuarticEase EasingMode="EaseOut"/>
                            </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>
                    </Storyboard>
                </Canvas.Resources>
                <Button x:Name="Item1" Content="Item1" Width="70" Height="50" Foreground="White" Background="#FFE44D26" RenderTransformOrigin="0.5,0.5">
                    <Button.RenderTransform>
                        <CompositeTransform/>
                    </Button.RenderTransform>
                </Button>
                <Button x:Name="Item2" Content="Item2" Width="70" Height="50" Foreground="White" Background="#FFE44D26" RenderTransformOrigin="0.5,0.5">
                    <Button.RenderTransform>
                        <CompositeTransform/>
                    </Button.RenderTransform>
                </Button>
                <Button x:Name="Item3" Content="Item3" Width="70" Height="50" Foreground="White" Background="#FFE44D26" RenderTransformOrigin="0.5,0.5">
                    <Button.RenderTransform>
                        <CompositeTransform/>
                    </Button.RenderTransform>
                </Button>
                <Button x:Name="Item4" Content="Item4" Width="70" Height="50" Foreground="White" Background="#FFE44D26" RenderTransformOrigin="0.5,0.5">
                    <Button.RenderTransform>
                        <CompositeTransform/>
                    </Button.RenderTransform>
                </Button>
                <Button x:Name="ButtonToStartAnimationClose" Content="Close" Visibility="Collapsed" Width="70" Height="50" Click="ButtonToStartAnimationClose_Click" Foreground="White" Background="#FFE44D26" />
                <Button x:Name="ButtonToStartAnimationOpen" Content="Start" Width="70" Height="50" Click="ButtonToStartAnimationOpen_Click" Foreground="White" Background="#FFE44D26" />
            </Canvas>
            <Button Content="[view/hide source code]" Margin="0,5,0,0" Foreground="#FF888888" HorizontalAlignment="Left" Click="ViewHideSourceCodeForAnimationsDemo_Click"/>
            <Border x:Name="SourceCodeForAnimationsDemo" Background="#FFE7E7E7" Margin="0,10,0,0" HorizontalAlignment="Left" Visibility="Collapsed">
                <StackPanel Orientation="Vertical" Margin="5">
                    <TextBlock Text="XAML CODE:" FontSize="11" Foreground="#FFAD776B"/>
                    <TextBlock FontSize="11" Margin="0,3,0,0" Foreground="#FF606060" Text="&lt;Canvas&#160;x:Name=&quot;CanvasForAnimationsDemo&quot;&#160;Width=&quot;350&quot;&#160;Height=&quot;50&quot;&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;Canvas.Resources&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;Storyboard&#160;x:Key=&quot;AnimationToOpen&quot;&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;DoubleAnimation&#160;Duration=&quot;0:0:1&quot;&#160;To=&quot;70&quot;&#160;Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(CompositeTransform.TranslateX)&quot;&#160;Storyboard.TargetName=&quot;Item1&quot;&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;DoubleAnimation.EasingFunction&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;QuarticEase&#160;EasingMode=&quot;EaseOut&quot;/&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/DoubleAnimation.EasingFunction&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/DoubleAnimation&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;DoubleAnimation&#160;Duration=&quot;0:0:1&quot;&#160;To=&quot;140&quot;&#160;Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(CompositeTransform.TranslateX)&quot;&#160;Storyboard.TargetName=&quot;Item2&quot;&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;DoubleAnimation.EasingFunction&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;QuarticEase&#160;EasingMode=&quot;EaseOut&quot;/&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/DoubleAnimation.EasingFunction&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/DoubleAnimation&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;DoubleAnimation&#160;Duration=&quot;0:0:1&quot;&#160;To=&quot;210&quot;&#160;Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(CompositeTransform.TranslateX)&quot;&#160;Storyboard.TargetName=&quot;Item3&quot;&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;DoubleAnimation.EasingFunction&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;QuarticEase&#160;EasingMode=&quot;EaseOut&quot;/&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/DoubleAnimation.EasingFunction&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/DoubleAnimation&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;DoubleAnimation&#160;Duration=&quot;0:0:1&quot;&#160;To=&quot;280&quot;&#160;Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(CompositeTransform.TranslateX)&quot;&#160;Storyboard.TargetName=&quot;Item4&quot;&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;DoubleAnimation.EasingFunction&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;QuarticEase&#160;EasingMode=&quot;EaseOut&quot;/&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/DoubleAnimation.EasingFunction&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/DoubleAnimation&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/Storyboard&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;Storyboard&#160;x:Key=&quot;AnimationToClose&quot;&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;DoubleAnimation&#160;Duration=&quot;0:0:1&quot;&#160;To=&quot;0&quot;&#160;Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(CompositeTransform.TranslateX)&quot;&#160;Storyboard.TargetName=&quot;Item1&quot;&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;DoubleAnimation.EasingFunction&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;QuarticEase&#160;EasingMode=&quot;EaseOut&quot;/&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/DoubleAnimation.EasingFunction&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/DoubleAnimation&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;DoubleAnimation&#160;Duration=&quot;0:0:1&quot;&#160;To=&quot;0&quot;&#160;Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(CompositeTransform.TranslateX)&quot;&#160;Storyboard.TargetName=&quot;Item2&quot;&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;DoubleAnimation.EasingFunction&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;QuarticEase&#160;EasingMode=&quot;EaseOut&quot;/&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/DoubleAnimation.EasingFunction&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/DoubleAnimation&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;DoubleAnimation&#160;Duration=&quot;0:0:1&quot;&#160;To=&quot;0&quot;&#160;Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(CompositeTransform.TranslateX)&quot;&#160;Storyboard.TargetName=&quot;Item3&quot;&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;DoubleAnimation.EasingFunction&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;QuarticEase&#160;EasingMode=&quot;EaseOut&quot;/&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/DoubleAnimation.EasingFunction&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/DoubleAnimation&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;DoubleAnimation&#160;Duration=&quot;0:0:1&quot;&#160;To=&quot;0&quot;&#160;Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(CompositeTransform.TranslateX)&quot;&#160;Storyboard.TargetName=&quot;Item4&quot;&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;DoubleAnimation.EasingFunction&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;QuarticEase&#160;EasingMode=&quot;EaseOut&quot;/&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/DoubleAnimation.EasingFunction&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/DoubleAnimation&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/Storyboard&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;/Canvas.Resources&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;Button&#160;x:Name=&quot;Item1&quot;&#160;Content=&quot;Item1&quot;&#160;Width=&quot;70&quot;&#160;Height=&quot;50&quot;&#160;Foreground=&quot;White&quot;&#160;Background=&quot;#FFE44D26&quot;&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;Button.RenderTransform&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;CompositeTransform/&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/Button.RenderTransform&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;/Button&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;Button&#160;x:Name=&quot;Item2&quot;&#160;Content=&quot;Item2&quot;&#160;Width=&quot;70&quot;&#160;Height=&quot;50&quot;&#160;Foreground=&quot;White&quot;&#160;Background=&quot;#FFE44D26&quot;&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;Button.RenderTransform&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;CompositeTransform/&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/Button.RenderTransform&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;/Button&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;Button&#160;x:Name=&quot;Item3&quot;&#160;Content=&quot;Item3&quot;&#160;Width=&quot;70&quot;&#160;Height=&quot;50&quot;&#160;Foreground=&quot;White&quot;&#160;Background=&quot;#FFE44D26&quot;&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;Button.RenderTransform&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;CompositeTransform/&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/Button.RenderTransform&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;/Button&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;Button&#160;x:Name=&quot;Item4&quot;&#160;Content=&quot;Item4&quot;&#160;Width=&quot;70&quot;&#160;Height=&quot;50&quot;&#160;Foreground=&quot;White&quot;&#160;Background=&quot;#FFE44D26&quot;&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;Button.RenderTransform&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;CompositeTransform/&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/Button.RenderTransform&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;/Button&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;Button&#160;x:Name=&quot;ButtonToStartAnimationClose&quot;&#160;Content=&quot;Close&quot;&#160;Visibility=&quot;Collapsed&quot;&#160;Width=&quot;70&quot;&#160;Height=&quot;50&quot;&#160;Click=&quot;ButtonToStartAnimationClose_Click&quot;&#160;Foreground=&quot;White&quot;&#160;Background=&quot;#FFE44D26&quot;&#160;/&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;Button&#160;x:Name=&quot;ButtonToStartAnimationOpen&quot;&#160;Content=&quot;Start&quot;&#160;Width=&quot;70&quot;&#160;Height=&quot;50&quot;&#160;Click=&quot;ButtonToStartAnimationOpen_Click&quot;&#160;Foreground=&quot;White&quot;&#160;Background=&quot;#FFE44D26&quot;&#160;/&gt;&#x0a;&lt;/Canvas&gt;"/>
                    <TextBlock Text="C# CODE:" Margin="0,5,0,0" FontSize="11" Foreground="#FFAD776B"/>
                    <TextBlock FontSize="11" Margin="0,3,0,0" Foreground="#FF606060" Text="void&#160;ButtonToStartAnimationOpen_Click(object&#160;sender,&#160;RoutedEventArgs&#160;e)&#x0a;{&#x0a;&#160;&#160;&#160;&#160;var&#160;storyboard&#160;=&#160;(Storyboard)CanvasForAnimationsDemo.Resources[&quot;AnimationToOpen&quot;];&#x0a;&#160;&#160;&#160;&#160;storyboard.Begin();&#x0a;&#160;&#160;&#160;&#160;ButtonToStartAnimationOpen.Visibility&#160;=&#160;Visibility.Collapsed;&#x0a;&#160;&#160;&#160;&#160;ButtonToStartAnimationClose.Visibility&#160;=&#160;Visibility.Visible;&#x0a;}&#x0a;&#x0a;void&#160;ButtonToStartAnimationClose_Click(object&#160;sender,&#160;RoutedEventArgs&#160;e)&#x0a;{&#x0a;&#160;&#160;&#160;&#160;var&#160;storyboard&#160;=&#160;(Storyboard)CanvasForAnimationsDemo.Resources[&quot;AnimationToClose&quot;];&#x0a;&#160;&#160;&#160;&#160;storyboard.Begin();&#x0a;&#160;&#160;&#160;&#160;ButtonToStartAnimationOpen.Visibility&#160;=&#160;Visibility.Visible;&#x0a;&#160;&#160;&#160;&#160;ButtonToStartAnimationClose.Visibility&#160;=&#160;Visibility.Collapsed;&#x0a;}"/>
                </StackPanel>
            </Border>
            <TextBlock Text="Drag and Drop" Margin="0,50,0,0" FontSize="26" Foreground="#FF414141"/>
            <TextBlock Text="Drag the following rectangle to move it on the canvas." Foreground="#FF808080" Margin="0,10,0,0" TextWrapping="Wrap" Width="220" FontSize="12" HorizontalAlignment="Left"/>
            <TextBlock Text="Note: performance in the browser is better than in the Simulator due to the debugger of the Simulator." Foreground="#FF808080" Margin="0,10,0,0" TextWrapping="Wrap" Width="220" FontSize="12" HorizontalAlignment="Left"/>
            <Border Width="200" Height="100" Background="White" BorderThickness="2" BorderBrush="LightGray" HorizontalAlignment="Left" Margin="0,10,0,0">
                <Canvas>
                    <Rectangle Fill="Yellow" Width="50" Height="50" Canvas.Left="10" Canvas.Top="10" Cursor="SizeAll" PointerPressed="DragAndDropItem_PointerPressed" PointerReleased="DragAndDropItem_PointerReleased" PointerMoved="DragAndDropItem_PointerMoved"/>
                </Canvas>
            </Border>
            <Button Content="[view/hide source code]" Margin="0,5,0,0" Foreground="#FF888888" HorizontalAlignment="Left" Click="ViewHideSourceCodeForDragAndDropDemo_Click"/>
            <Border x:Name="SourceCodeForDragAndDropDemo" Background="#FFE7E7E7" Margin="0,10,0,0" HorizontalAlignment="Left" Visibility="Collapsed">
                <StackPanel Orientation="Vertical" Margin="5">
                    <TextBlock Text="XAML CODE:" FontSize="11" Foreground="#FFAD776B"/>
                    <TextBlock FontSize="11" Margin="0,3,0,0" Foreground="#FF606060" Text="&lt;Border&#160;Width=&quot;200&quot;&#160;Height=&quot;100&quot;&#160;Background=&quot;White&quot;&#160;BorderThickness=&quot;2&quot;&#160;BorderBrush=&quot;LightGray&quot;&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;Canvas&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;Rectangle&#160;Fill=&quot;Yellow&quot;&#160;Width=&quot;50&quot;&#160;Height=&quot;50&quot;&#160;Canvas.Left=&quot;10&quot;&#160;Canvas.Top=&quot;10&quot;&#160;Cursor=&quot;SizeAll&quot;&#160;PointerPressed=&quot;DragAndDropItem_PointerPressed&quot;&#160;PointerReleased=&quot;DragAndDropItem_PointerReleased&quot;&#160;PointerMoved=&quot;DragAndDropItem_PointerMoved&quot;/&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;/Canvas&gt;&#x0a;&lt;/Border&gt;"/>
                    <TextBlock Text="C# CODE:" Margin="0,5,0,0" FontSize="11" Foreground="#FFAD776B"/>
                    <TextBlock FontSize="11" Margin="0,3,0,0" Foreground="#FF606060" Text="bool&#160;_isPointerCaptured;&#x0a;double&#160;_pointerX;&#x0a;double&#160;_pointerY;&#x0a;double&#160;_objectLeft;&#x0a;double&#160;_objectTop;&#x0a;&#x0a;void&#160;DragAndDropItem_PointerPressed(object&#160;sender,&#160;PointerRoutedEventArgs&#160;e)&#x0a;{&#x0a;&#160;&#160;&#160;&#160;UIElement&#160;uielement&#160;=&#160;(UIElement)sender;&#x0a;&#160;&#160;&#160;&#160;_pointerX&#160;=&#160;e.GetCurrentPoint(null).Position.X;&#x0a;&#160;&#160;&#160;&#160;_pointerY&#160;=&#160;e.GetCurrentPoint(null).Position.Y;&#x0a;&#160;&#160;&#160;&#160;_objectLeft&#160;=&#160;Canvas.GetLeft(uielement);&#x0a;&#160;&#160;&#160;&#160;_objectTop&#160;=&#160;Canvas.GetTop(uielement);&#x0a;&#160;&#160;&#160;&#160;uielement.CapturePointer(e.Pointer);&#x0a;&#160;&#160;&#160;&#160;_isPointerCaptured&#160;=&#160;true;&#x0a;}&#x0a;&#x0a;void&#160;DragAndDropItem_PointerMoved(object&#160;sender,&#160;PointerRoutedEventArgs&#160;e)&#x0a;{&#x0a;&#160;&#160;&#160;&#160;UIElement&#160;uielement&#160;=&#160;(UIElement)sender;&#x0a;&#160;&#160;&#160;&#160;if&#160;(_isPointerCaptured)&#x0a;&#160;&#160;&#160;&#160;{&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#160;Calculate&#160;the&#160;new&#160;position&#160;of&#160;the&#160;object:&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;double&#160;deltaH&#160;=&#160;e.GetCurrentPoint(null).Position.X&#160;-&#160;_pointerX;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;double&#160;deltaV&#160;=&#160;e.GetCurrentPoint(null).Position.Y&#160;-&#160;_pointerY;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_objectLeft&#160;=&#160;deltaH&#160;+&#160;_objectLeft;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_objectTop&#160;=&#160;deltaV&#160;+&#160;_objectTop;&#x0a;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#160;Update&#160;the&#160;object&#160;position:&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Canvas.SetLeft(uielement,&#160;_objectLeft);&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Canvas.SetTop(uielement,&#160;_objectTop);&#x0a;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#160;Remember&#160;the&#160;pointer&#160;position:&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_pointerX&#160;=&#160;e.GetCurrentPoint(null).Position.X;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_pointerY&#160;=&#160;e.GetCurrentPoint(null).Position.Y;&#x0a;&#160;&#160;&#160;&#160;}&#x0a;}&#x0a;&#x0a;void&#160;DragAndDropItem_PointerReleased(object&#160;sender,&#160;PointerRoutedEventArgs&#160;e)&#x0a;{&#x0a;&#160;&#160;&#160;&#160;UIElement&#160;uielement&#160;=&#160;(UIElement)sender;&#x0a;&#160;&#160;&#160;&#160;_isPointerCaptured&#160;=&#160;false;&#x0a;&#160;&#160;&#160;&#160;uielement.ReleasePointerCapture(e.Pointer);&#x0a;}"/>
                </StackPanel>
            </Border>
            <TextBlock Text="Regular Expressions" Margin="0,50,0,0" FontSize="26" Foreground="#FF414141"/>
            <TextBlock Text="The following example shows how to use regular expressions to validate an email adress:" Foreground="#FF808080" Margin="0,10,0,0" TextWrapping="Wrap" Width="220" FontSize="12" HorizontalAlignment="Left"/>
            <TextBox x:Name="TextBoxEmailAddress" Text="email@test.com" Margin="0,5,0,0" Width="150" Foreground="#FFE44D26" Background="White" HorizontalAlignment="Left"/>
            <Button Content="Click to check if the text above is a valid email address" Background="#FFE44D26" Foreground="White" HorizontalAlignment="Left" Margin="0,5,0,5" Click="ButtonCheckIfEmailAddressIsValid_Click"/>
            <Button Content="[view/hide source code]" Margin="0,5,0,0" Foreground="#FF888888" HorizontalAlignment="Left" Click="ViewHideSourceCodeForRegex1Demo_Click"/>
            <Border x:Name="SourceCodeForRegex1Demo" Background="#FFE7E7E7" Margin="0,10,0,0" HorizontalAlignment="Left" Visibility="Collapsed">
                <StackPanel Orientation="Vertical" Margin="5">
                    <TextBlock Text="XAML CODE:" FontSize="11" Foreground="#FFAD776B"/>
                    <TextBlock FontSize="11" Margin="0,3,0,0" Foreground="#FF606060" Text="&lt;TextBox&#160;x:Name=&quot;TextBoxEmailAddress&quot;&#160;Text=&quot;email@test.com&quot;/&gt;&#x0a;&lt;Button&#160;Content=&quot;Click&#160;to&#160;check&#160;if&#160;the&#160;text&#160;above&#160;is&#160;a&#160;valid&#160;email&#160;address&quot;&#160;Click=&quot;ButtonCheckIfEmailAddressIsValid_Click&quot;/&gt;"/>
                    <TextBlock Text="C# CODE:" Margin="0,5,0,0" FontSize="11" Foreground="#FFAD776B"/>
                    <TextBlock FontSize="11" Margin="0,3,0,0" Foreground="#FF606060" Text="private&#160;void&#160;ButtonCheckIfEmailAddressIsValid_Click(object&#160;sender,&#160;RoutedEventArgs&#160;e)&#x0a;{&#x0a;&#160;&#160;&#160;&#160;if&#160;(Regex.IsMatch(TextBoxEmailAddress.Text,&#160;@&quot;^\w+([-+.&apos;]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$&quot;))&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;MessageBox.Show(TextBoxEmailAddress.Text&#160;+&#160;&quot;&#160;is&#160;a&#160;valid&#160;email&#160;address.&quot;);&#x0a;&#160;&#160;&#160;&#160;else&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;MessageBox.Show(TextBoxEmailAddress.Text&#160;+&#160;&quot;&#160;is&#160;NOT&#160;a&#160;valid&#160;email&#160;address.&quot;);&#x0a;}"/>
                </StackPanel>
            </Border>
            <TextBlock Text="Replacing text using Regex" Margin="0,50,0,0" FontSize="26" Foreground="#FF414141"/>
            <TextBlock Text="The following example shows how to replace text using regular expressions. We are going to replace all the dates that are in the format mm/dd/yyyy into yyyy-mm-dd" Foreground="#FF808080" Margin="0,5,0,0" TextWrapping="Wrap" Width="220" FontSize="12" HorizontalAlignment="Left"/>
            <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                <TextBlock Text="Input string:" FontSize="12"/>
                <TextBox x:Name="TextBoxRegexReplaceDemo" Text="The solar eclipse of 05/29/1919 was used to verify general relativity. The longest total eclipse was on 06/20/1955 and lasted 7 minutes." Width="200" TextWrapping="Wrap" FontSize="12" AcceptsReturn="True" Margin="5,0,0,0"/>
            </StackPanel>
            <Button Content="Click to replace dates format" Background="#FFE44D26" Foreground="White" HorizontalAlignment="Left" Margin="0,5,0,0" Click="ButtonReplaceDates_Click"/>
            <StackPanel Orientation="Horizontal" Margin="0,5,0,0">
                <TextBlock Text="Ouput string:" FontSize="12"/>
                <TextBlock x:Name="TextBlockOutputOfRegexReplaceDemo" Text="" Width="200" TextWrapping="Wrap" FontSize="12" Margin="5,0,0,0"/>
            </StackPanel>
            <Button Content="[view/hide source code]" Margin="0,5,0,0" Foreground="#FF888888" HorizontalAlignment="Left" Click="ViewHideSourceCodeForRegex2Demo_Click"/>
            <Border x:Name="SourceCodeForRegex2Demo" Background="#FFE7E7E7" Margin="0,10,0,0" HorizontalAlignment="Left" Visibility="Collapsed">
                <StackPanel Orientation="Vertical" Margin="5">
                    <TextBlock Text="XAML CODE:" FontSize="11" Foreground="#FFAD776B"/>
                    <TextBlock FontSize="11" Margin="0,3,0,0" Foreground="#FF606060" Text="&lt;StackPanel&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;TextBlock&#160;Text=&quot;Input&#160;string:&quot;/&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;TextBox&#160;x:Name=&quot;TextBoxRegexReplaceDemo&quot;&#160;Text=&quot;The&#160;solar&#160;eclipse&#160;of&#160;05/29/1919&#160;was&#160;used&#160;to&#160;verify&#160;general&#160;relativity.&quot;&#160;Width=&quot;200&quot;&#160;TextWrapping=&quot;Wrap&quot;&#160;AcceptsReturn=&quot;True&quot;/&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;Button&#160;Content=&quot;Click&#160;to&#160;replace&#160;dates&#160;format&quot;&#160;Click=&quot;ButtonReplaceDates_Click&quot;/&gt;&#x0a;&lt;/StackPanel&gt;"/>
                    <TextBlock Text="C# CODE:" Margin="0,5,0,0" FontSize="11" Foreground="#FFAD776B"/>
                    <TextBlock FontSize="11" Margin="0,3,0,0" Foreground="#FF606060" Text="TextBlockOutputOfRegexReplaceDemo.Text&#160;=&#160;Regex.Replace(TextBoxRegexReplaceDemo.Text,&#160;@&quot;(\d{2})/(\d{2})/(\d{2,4})&quot;,&#160;&quot;$3-$2-$1&quot;);"/>
                </StackPanel>
            </Border>
            <TextBlock Text="Regex playground" Margin="0,50,0,0" FontSize="26" Foreground="#FF414141"/>
            <StackPanel Orientation="Vertical" Margin="0,20,0,0">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Enter input string:" FontSize="12"/>
                    <TextBox x:Name="InputTextBox" Margin="5,0,0,0" AcceptsReturn="True" FontSize="12" Text="The solar eclipse of 05/29/1919 was used to verify general relativity."/>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Enter regular expression:" FontSize="12"/>
                    <TextBox x:Name="ExpressionTextBox" Margin="5,0,0,0" FontSize="12" Text="(\d{2})/(\d{2})/(\d{2,4})"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Enter optional replacement text:" FontSize="12"/>
                    <TextBox x:Name="ReplacementTextBox" Margin="5,0,0,0" FontSize="12" Text="$3-$2-$1"/>
                </StackPanel>
                <Button Content="Apply the Regular Expression" Background="#FFE44D26" Foreground="White" HorizontalAlignment="Left" Margin="0,5,0,5" Click="ApplyRegularExpression"/>
                <TextBlock Text="Results:" FontSize="16"/>
                <StackPanel Orientation="Vertical" Margin="20,0,0,0">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="- Match found (Result of IsMatch):" FontSize="12"/>
                        <TextBlock x:Name="IsMatchTextBlock" Text="N/A" VerticalAlignment="Center" Margin="4,0,0,0"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="- First Match (Result of Match):" FontSize="12"/>
                        <TextBlock x:Name="MatchTextBlock" Text="N/A" VerticalAlignment="Center" Margin="4,0,0,0"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="- All Matches (Result of Matches):" FontSize="12"/>
                        <TextBlock x:Name="MatchesTextBlock" Text="N/A" VerticalAlignment="Center" Margin="4,0,0,0"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="- Matches replaced (Result of Replace):" FontSize="12"/>
                        <TextBlock x:Name="ReplaceTextBlock" Text="N/A" VerticalAlignment="Center" Margin="4,0,0,0"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="- Expression escaped (Result of Escape):" FontSize="12"/>
                        <TextBlock x:Name="EscapeTextBlock" Text="N/A" VerticalAlignment="Center" Margin="4,0,0,0"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="- Expression unescaped (Result of Unescape):" FontSize="12"/>
                        <TextBlock x:Name="UnescapeTextBlock" Text="N/A" VerticalAlignment="Center" Margin="4,0,0,0"/>
                    </StackPanel>
                    
                        <TextBlock Text="- Captured Groups:" FontSize="12"/>
                    <StackPanel x:Name="CapturedGroupsStackPanel" Orientation="Vertical" Margin="40,0,0,0">
                    </StackPanel>
                </StackPanel>
                <TextBlock Text="Note: named groups are not supported, use numbered groups instead (see example above)." FontSize="12"/>
            </StackPanel>
            <TextBlock Text="IsolatedStorageSettings" Margin="0,50,0,0" FontSize="26" Foreground="#FF414141"/>
            <TextBlock Text="The IsolatedStorageSettings class lets you easily persist key/value pairs, using the HTML5 Storage API. When you restart the browser, the data is still there. This is by far the simplest way to store settings in your app." Foreground="#FF808080" Margin="0,10,0,0" TextWrapping="Wrap" Width="220" FontSize="12" HorizontalAlignment="Left"/>
            <TextBox x:Name="TextBoxIsolatedStorageSettingsDemo" Text="Enter some text" Margin="0,5,0,0" Width="150" Foreground="#FFE44D26" Background="White" HorizontalAlignment="Left"/>
            <Button Content="Save the text above" Background="#FFE44D26" Foreground="White" HorizontalAlignment="Left" Margin="0,5,0,0" Click="ButtonSaveToIsolatedStorageSettings_Click"/>
            <Button Content="Load the saved text" Background="#FFE44D26" Foreground="White" HorizontalAlignment="Left" Margin="0,5,0,0" Click="ButtonLoadFromIsolatedStorageSettings_Click"/>
            <Button Content="Delete the saved text" Background="#FFE44D26" Foreground="White" HorizontalAlignment="Left" Margin="0,5,0,0" Click="ButtonDeleteFromIsolatedStorageSettings_Click"/>
            <Button Content="[view/hide source code]" Margin="0,5,0,0" Foreground="#FF888888" HorizontalAlignment="Left" Click="ViewHideSourceCodeForIsolatedStorageSettingsDemo_Click"/>
            <Border x:Name="SourceCodeForIsolatedStorageSettingsDemo" Background="#FFE7E7E7" Margin="0,10,0,0" HorizontalAlignment="Left" Visibility="Collapsed">
                <StackPanel Orientation="Vertical" Margin="5">
                    <TextBlock Text="XAML CODE:" FontSize="11" Foreground="#FFAD776B"/>
                    <TextBlock FontSize="11" Margin="0,3,0,0" Foreground="#FF606060" Text="&lt;StackPanel&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;TextBox&#160;x:Name=&quot;TextBoxIsolatedStorageSettingsDemo&quot;&#160;Text=&quot;Enter&#160;some&#160;text&quot;/&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;Button&#160;Content=&quot;Save&#160;the&#160;text&#160;above&quot;&#160;Click=&quot;ButtonSaveToIsolatedStorageSettings_Click&quot;/&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;Button&#160;Content=&quot;Load&#160;the&#160;saved&#160;text&quot;&#160;Click=&quot;ButtonLoadFromIsolatedStorageSettings_Click&quot;/&gt;&#x0a;&lt;/StackPanel&gt;"/>
                    <TextBlock Text="C# CODE:" Margin="0,5,0,0" FontSize="11" Foreground="#FFAD776B"/>
                    <TextBlock FontSize="11" Margin="0,3,0,0" Foreground="#FF606060" Text="private&#160;void&#160;ButtonSaveToIsolatedStorageSettings_Click(object&#160;sender,&#160;RoutedEventArgs&#160;e)&#x0a;{&#x0a;&#160;&#160;&#160;&#160;string&#160;key&#160;=&#160;&quot;SampleKey&quot;;&#x0a;&#160;&#160;&#160;&#160;string&#160;value&#160;=&#160;TextBoxIsolatedStorageSettingsDemo.Text;&#x0a;&#160;&#160;&#160;&#160;IsolatedStorageSettings.ApplicationSettings[key]&#160;=&#160;value;&#x0a;&#160;&#160;&#160;&#160;MessageBox.Show(&quot;The&#160;text&#160;was&#160;successfully&#160;saved&#160;to&#160;the&#160;storage.&quot;);&#x0a;}&#x0a;&#x0a;private&#160;void&#160;ButtonLoadFromIsolatedStorageSettings_Click(object&#160;sender,&#160;RoutedEventArgs&#160;e)&#x0a;{&#x0a;&#160;&#160;&#160;&#160;string&#160;key&#160;=&#160;&quot;SampleKey&quot;;&#x0a;&#160;&#160;&#160;&#160;string&#160;value;&#x0a;&#160;&#160;&#160;&#160;if&#160;(IsolatedStorageSettings.ApplicationSettings.TryGetValue(key,&#160;out&#160;value))&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;MessageBox.Show(&quot;The&#160;following&#160;text&#160;was&#160;read&#160;from&#160;the&#160;storage:&#160;&quot;&#160;+&#160;value);&#x0a;&#160;&#160;&#160;&#160;else&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;MessageBox.Show(&quot;No&#160;text&#160;was&#160;found&#160;in&#160;the&#160;storage.&quot;);&#x0a;}&#x0a;&#x0a;private&#160;void&#160;ButtonDeleteFromIsolatedStorageSettings_Click(object&#160;sender,&#160;RoutedEventArgs&#160;e)&#x0a;{&#x0a;&#160;&#160;&#160;&#160;string&#160;key&#160;=&#160;&quot;SampleKey&quot;;&#x0a;&#160;&#160;&#160;&#160;IsolatedStorageSettings.ApplicationSettings.Remove(key);&#x0a;&#160;&#160;&#160;&#160;MessageBox.Show(&quot;The&#160;text&#160;was&#160;successfully&#160;removed&#160;from&#160;the&#160;storage.&quot;);&#x0a;}"/>
                </StackPanel>
            </Border>
            <TextBlock Text="IsolatedStorageFile/FileInfo" Margin="0,50,0,0" FontSize="26" Foreground="#FF414141"/>
            <TextBlock Text="The IsolatedStorageFile class and the FileInfo class are two alternative ways to persist files using the HTML5 Storage API." Foreground="#FF808080" Margin="0,10,0,0" TextWrapping="Wrap" Width="220" FontSize="12" HorizontalAlignment="Left"/>
            <TextBlock Text="Tip: you can inspect the content of the whole storage by using Chrome and installing the free 'Storage Area Explorer' extension." Foreground="#FF808080" Margin="0,10,0,0" TextWrapping="Wrap" Width="220" FontSize="12" HorizontalAlignment="Left"/>
            <TextBox x:Name="TextBoxFileStorageDemo" Text="Enter some text" Margin="0,15,0,0" Width="150" Foreground="#FFE44D26" Background="White" HorizontalAlignment="Left"/>
            <Button Content="Save to file using the IsolatedStorageFile class" Background="#FFE44D26" Foreground="White" HorizontalAlignment="Left" Margin="0,15,0,0" Click="ButtonSaveToIsolatedStorageFile_Click"/>
            <Button Content="Load from file using the IsolatedStorageFile class" Background="#FFE44D26" Foreground="White" HorizontalAlignment="Left" Margin="0,5,0,0" Click="ButtonLoadFromIsolatedStorageFile_Click"/>
            <Button Content="[view/hide source code]" Margin="0,5,0,0" Foreground="#FF888888" HorizontalAlignment="Left" Click="ViewHideSourceCodeForIsolatedStorageFileDemo_Click"/>
            <Border x:Name="SourceCodeForIsolatedStorageFileDemo" Background="#FFE7E7E7" Margin="0,10,0,0" HorizontalAlignment="Left" Visibility="Collapsed">
                <StackPanel Orientation="Vertical" Margin="5">
                    <TextBlock Text="XAML CODE:" FontSize="11" Foreground="#FFAD776B"/>
                    <TextBlock FontSize="11" Margin="0,3,0,0" Foreground="#FF606060" Text="&lt;StackPanel&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;TextBox&#160;x:Name=&quot;TextBoxFileStorageDemo&quot;&#160;Text=&quot;Enter&#160;some&#160;text&quot;/&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;Button&#160;Content=&quot;Save&#160;to&#160;file&#160;using&#160;the&#160;IsolatedStorageFile&#160;class&quot;&#160;Click=&quot;ButtonSaveToIsolatedStorageFile_Click&quot;/&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;Button&#160;Content=&quot;Load&#160;from&#160;file&#160;using&#160;the&#160;IsolatedStorageFile&#160;class&quot;&#160;Click=&quot;ButtonLoadFromIsolatedStorageFile_Click&quot;/&gt;&#x0a;&lt;/StackPanel&gt;"/>
                    <TextBlock Text="C# CODE:" Margin="0,5,0,0" FontSize="11" Foreground="#FFAD776B"/>
                    <TextBlock FontSize="11" Margin="0,3,0,0" Foreground="#FF606060" Text="private&#160;void&#160;ButtonSaveToIsolatedStorageFile_Click(object&#160;sender,&#160;RoutedEventArgs&#160;e)&#x0a;{&#x0a;&#160;&#160;&#160;&#160;string&#160;fileName&#160;=&#160;&quot;SampleFile.txt&quot;;&#x0a;&#160;&#160;&#160;&#160;string&#160;data&#160;=&#160;TextBoxFileStorageDemo.Text;&#x0a;&#160;&#160;&#160;&#160;using&#160;(IsolatedStorageFile&#160;storage&#160;=&#160;IsolatedStorageFile.GetUserStoreForAssembly())&#x0a;&#160;&#160;&#160;&#160;{&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;IsolatedStorageFileStream&#160;fs&#160;=&#160;null;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;using&#160;(fs&#160;=&#160;storage.CreateFile(fileName))&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if&#160;(fs&#160;!=&#160;null)&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Encoding&#160;encoding&#160;=&#160;new&#160;UTF8Encoding();&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;byte[]&#160;bytes&#160;=&#160;encoding.GetBytes(data);&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fs.Write(bytes,&#160;0,&#160;bytes.Length);&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fs.Close();&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;MessageBox.Show(&quot;A&#160;new&#160;file&#160;named&#160;SampleFile.txt&#160;was&#160;successfully&#160;saved&#160;to&#160;the&#160;storage.&quot;);&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;MessageBox.Show(&quot;Unable&#160;to&#160;save&#160;the&#160;file&#160;SampleFile.txt&#160;to&#160;the&#160;storage.&quot;);&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#x0a;&#160;&#160;&#160;&#160;}&#x0a;}&#x0a;&#x0a;private&#160;void&#160;ButtonLoadFromIsolatedStorageFile_Click(object&#160;sender,&#160;RoutedEventArgs&#160;e)&#x0a;{&#x0a;&#160;&#160;&#160;&#160;string&#160;fileName&#160;=&#160;&quot;SampleFile.txt&quot;;&#x0a;&#160;&#160;&#160;&#160;using&#160;(IsolatedStorageFile&#160;storage&#160;=&#160;IsolatedStorageFile.GetUserStoreForAssembly())&#x0a;&#160;&#160;&#160;&#160;{&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if&#160;(storage.FileExists(fileName))&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;using&#160;(IsolatedStorageFileStream&#160;fs&#160;=&#160;storage.OpenFile(fileName,&#160;System.IO.FileMode.Open))&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if&#160;(fs&#160;!=&#160;null)&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;using&#160;(StreamReader&#160;sr&#160;=&#160;new&#160;StreamReader(fs))&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;string&#160;data&#160;=&#160;sr.ReadToEnd();&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;MessageBox.Show(&quot;The&#160;following&#160;text&#160;was&#160;read&#160;from&#160;the&#160;file&#160;SampleFile.txt&#160;located&#160;in&#160;the&#160;storage:&#160;&quot;&#160;+&#160;data);&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;MessageBox.Show(&quot;Unable&#160;to&#160;load&#160;the&#160;file&#160;SampleFile.txt&#160;from&#160;the&#160;storage.&quot;);&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;MessageBox.Show(&quot;No&#160;file&#160;named&#160;SampleFile.txt&#160;was&#160;found&#160;in&#160;the&#160;storage.&quot;);&#x0a;&#160;&#160;&#160;&#160;}&#x0a;}"/>
                </StackPanel>
            </Border>
            <Button Content="Save to file using the FileInfo class" Background="#FFE44D26" Foreground="White" HorizontalAlignment="Left" Margin="0,15,0,0" Click="ButtonSaveToFileInfo_Click"/>
            <Button Content="Load from file using the FileInfo class" Background="#FFE44D26" Foreground="White" HorizontalAlignment="Left" Margin="0,5,0,0" Click="ButtonLoadFromFileInfo_Click"/>
            <Button Content="Delete file using the FileInfo class" Background="#FFE44D26" Foreground="White" HorizontalAlignment="Left" Margin="0,5,0,0" Click="ButtonDeleteFileInfo_Click"/>
            <Button Content="[view/hide source code]" Margin="0,5,0,0" Foreground="#FF888888" HorizontalAlignment="Left" Click="ViewHideSourceCodeForFileInfoDemo_Click"/>
            <Border x:Name="SourceCodeForFileInfoDemo" Background="#FFE7E7E7" Margin="0,10,0,0" HorizontalAlignment="Left" Visibility="Collapsed">
                <StackPanel Orientation="Vertical" Margin="5">
                    <TextBlock Text="XAML CODE:" FontSize="11" Foreground="#FFAD776B"/>
                    <TextBlock FontSize="11" Margin="0,3,0,0" Foreground="#FF606060" Text="&lt;StackPanel&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;TextBox&#160;x:Name=&quot;TextBoxFileStorageDemo&quot;&#160;Text=&quot;Enter&#160;some&#160;text&quot;/&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;Button&#160;Content=&quot;Save&#160;to&#160;file&#160;using&#160;the&#160;FileInfo&#160;class&quot;&#160;Click=&quot;ButtonSaveToFileInfo_Click&quot;/&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;Button&#160;Content=&quot;Load&#160;from&#160;file&#160;using&#160;the&#160;FileInfo&#160;class&quot;&#160;Click=&quot;ButtonLoadFromFileInfo_Click&quot;/&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;Button&#160;Content=&quot;Delete&#160;file&#160;using&#160;the&#160;FileInfo&#160;class&quot;&#160;Click=&quot;ButtonDeleteFileInfo_Click&quot;/&gt;&#x0a;&lt;/StackPanel&gt;"/>
                    <TextBlock Text="C# CODE:" Margin="0,5,0,0" FontSize="11" Foreground="#FFAD776B"/>
                    <TextBlock FontSize="11" Margin="0,3,0,0" Foreground="#FF606060" Text="private&#160;void&#160;ButtonSaveToFileInfo_Click(object&#160;sender,&#160;RoutedEventArgs&#160;e)&#x0a;{&#x0a;&#160;&#160;&#160;&#160;string&#160;fileName&#160;=&#160;&quot;Test.txt&quot;;&#x0a;&#160;&#160;&#160;&#160;string&#160;data&#160;=&#160;TextBoxFileStorageDemo.Text;&#x0a;&#160;&#160;&#160;&#160;FileInfo&#160;fileInfo&#160;=&#160;new&#160;FileInfo(fileName);&#x0a;&#160;&#160;&#160;&#160;using&#160;(FileStream&#160;fs&#160;=&#160;fileInfo.OpenWrite())&#x0a;&#160;&#160;&#160;&#160;{&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Encoding&#160;encoding&#160;=&#160;new&#160;UTF8Encoding();&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;byte[]&#160;bytes&#160;=&#160;encoding.GetBytes(data);&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fs.Write(bytes,&#160;0,&#160;bytes.Length);&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fs.Close();&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;MessageBox.Show(&quot;A&#160;new&#160;file&#160;named&#160;Test.txt&#160;was&#160;successfully&#160;saved&#160;to&#160;the&#160;storage.&quot;);&#x0a;&#160;&#160;&#160;&#160;}&#x0a;}&#x0a;&#x0a;private&#160;void&#160;ButtonLoadFromFileInfo_Click(object&#160;sender,&#160;RoutedEventArgs&#160;e)&#x0a;{&#x0a;&#160;&#160;&#160;&#160;string&#160;fileName&#160;=&#160;&quot;Test.txt&quot;;&#x0a;&#160;&#160;&#160;&#160;FileInfo&#160;fileInfo&#160;=&#160;new&#160;FileInfo(fileName);&#x0a;&#160;&#160;&#160;&#160;if&#160;(fileInfo.Exists)&#x0a;&#160;&#160;&#160;&#160;{&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;using&#160;(FileStream&#160;fs&#160;=&#160;fileInfo.OpenRead())&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if&#160;(fs&#160;!=&#160;null)&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;using&#160;(StreamReader&#160;sr&#160;=&#160;new&#160;StreamReader(fs))&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;string&#160;data&#160;=&#160;sr.ReadToEnd();&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;MessageBox.Show(&quot;The&#160;following&#160;text&#160;was&#160;read&#160;from&#160;the&#160;file&#160;Test.txt&#160;located&#160;in&#160;the&#160;storage:&#160;&quot;&#160;+&#160;data);&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;MessageBox.Show(&quot;Unable&#160;to&#160;load&#160;the&#160;file&#160;Test.txt&#160;from&#160;the&#160;storage.&quot;);&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#x0a;&#160;&#160;&#160;&#160;}&#x0a;&#160;&#160;&#160;&#160;else&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;MessageBox.Show(&quot;No&#160;file&#160;named&#160;Test.txt&#160;was&#160;found&#160;in&#160;the&#160;storage.&quot;);&#x0a;}&#x0a;&#x0a;private&#160;void&#160;ButtonDeleteFileInfo_Click(object&#160;sender,&#160;RoutedEventArgs&#160;e)&#x0a;{&#x0a;&#160;&#160;&#160;&#160;string&#160;fileName&#160;=&#160;&quot;Test.txt&quot;;&#x0a;&#160;&#160;&#160;&#160;FileInfo&#160;fileInfo&#160;=&#160;new&#160;FileInfo(fileName);&#x0a;&#160;&#160;&#160;&#160;fileInfo.Delete();&#x0a;&#160;&#160;&#160;&#160;MessageBox.Show(&quot;The&#160;file&#160;named&#160;Test.txt&#160;was&#160;successfully&#160;deleted&#160;from&#160;the&#160;local&#160;page&#160;storage.&quot;);&#x0a;}"/>
                </StackPanel>
            </Border>
            <TextBlock Text="Styles" Margin="0,50,0,0" FontSize="26" Foreground="#FF414141"/>
            <TextBlock Text="Styles let you define re-usable sets of property/value pairs that can be applied to controls to customize their appearance." Foreground="#FF808080" Margin="0,10,0,0" TextWrapping="Wrap" Width="220" FontSize="12" HorizontalAlignment="Left"/>
            <TextBlock Text="In the following example, all three controls share a single style that defines their green background, white foreground, and large font size:" Foreground="#FF808080" Margin="0,10,0,0" TextWrapping="Wrap" Width="220" FontSize="12" HorizontalAlignment="Left"/>
            <Canvas Width="200" Height="70" Margin="0,10,0,0" HorizontalAlignment="Left">
                <Canvas.Resources>
                    <Style x:Key="ButtonStyle1" TargetType="Button">
                        <Setter Property="Background" Value="Green"/>
                        <Setter Property="Foreground" Value="White"/>
                        <Setter Property="FontSize" Value="20"/>
                    </Style>
                </Canvas.Resources>
                <Button Content="Element 3" Style="{StaticResource ButtonStyle1}"/>
                <Button Content="Element 2" Style="{StaticResource ButtonStyle1}" Canvas.Left="15" Canvas.Top="15"/>
                <Button Content="Element 1" Style="{StaticResource ButtonStyle1}" Canvas.Left="30" Canvas.Top="30"/>
            </Canvas>
            <Button Content="[view/hide source code]" Margin="0,5,0,0" Foreground="#FF888888" HorizontalAlignment="Left" Click="ViewHideSourceCodeForStylesDemo_Click"/>
            <Border x:Name="SourceCodeForStylesDemo" Background="#FFE7E7E7" Margin="0,10,0,0" HorizontalAlignment="Left" Visibility="Collapsed">
                <StackPanel Orientation="Vertical" Margin="5">
                    <TextBlock Text="XAML CODE:" FontSize="11" Foreground="#FFAD776B"/>
                    <TextBlock FontSize="11" Margin="0,3,0,0" Foreground="#FF606060" Text="&lt;Canvas Width=&quot;200&quot; Height=&quot;70&quot;&gt;&#x0a;&#160;&#160;&#160;&lt;Canvas.Resources&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&lt;Style x:Key=&quot;ButtonStyle1&quot; TargetType=&quot;Button&quot;&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;Setter Property=&quot;Background&quot; Value=&quot;Green&quot;/&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;Setter Property=&quot;Foreground&quot; Value=&quot;White&quot;/&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;Setter Property=&quot;FontSize&quot; Value=&quot;20&quot;/&gt;&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/Style&gt;&#x0a;&#160;&#160;&#160;&lt;/Canvas.Resources&gt;&#x0a;&#160;&#160;&#160;&lt;Button Content=&quot;Element 3&quot; Style=&quot;{StaticResource ButtonStyle1}&quot;/&gt;&#x0a;&#160;&#160;&#160;&lt;Button Content=&quot;Element 2&quot; Style=&quot;{StaticResource ButtonStyle1}&quot; Canvas.Left=&quot;15&quot; Canvas.Top=&quot;15&quot;/&gt;&#x0a;&#160;&#160;&#160;&lt;Button Content=&quot;Element 1&quot; Style=&quot;{StaticResource ButtonStyle1}&quot; Canvas.Left=&quot;30&quot; Canvas.Top=&quot;30&quot;/&gt;&#x0a;&lt;/Canvas&gt;"/>
                </StackPanel>
            </Border>
            <TextBlock Text="XmlSerializer" Margin="0,50,0,0" FontSize="26" Foreground="#FF414141"/>
            <TextBlock Text="The &quot;XmlSerializer&quot; class lets you serialize/deserialize C# types. You must add the [DataContract] attribute to the types that you wish to serialize or deserialize." Foreground="#FF808080" Margin="0,10,0,0" TextWrapping="Wrap" Width="220" FontSize="12" HorizontalAlignment="Left"/>
            <TextBlock Text="Please read the current limitations and tutorials at the following URL: http://www.cshtml5.com/links/xml-serializer-limitations-and-tutorials.aspx" Foreground="#FF808080" Margin="0,10,0,0" TextWrapping="Wrap" Width="220" FontSize="12" HorizontalAlignment="Left"/>
            <TextBlock Text="Example:" Foreground="#FF808080" Margin="0,10,0,0" TextWrapping="Wrap" Width="220" FontSize="12" HorizontalAlignment="Left"/>
            <StackPanel x:Name="SerializationSourcePanel" Orientation="Vertical" Margin="10,10,0,0">
                <TextBlock Text="Sample Serializable Class "/>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text=" - Text field: "/>
                    <TextBox Text="{Binding TextField, Mode=TwoWay}" Margin="5,0,0,0"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text=" - Date field: "/>
                    <TextBlock Text="{Binding DateField}" Margin="5,0,0,0"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text=" - Guid field: "/>
                    <TextBlock Text="{Binding GuidField}" Margin="5,0,0,0"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text=" - Boolean field: "/>
                    <TextBlock Text="{Binding BooleanField}" Margin="5,0,0,0"/>
                </StackPanel>
            </StackPanel>
            <Button Margin="0,10,0,0" Foreground="White" Background="#FFE44D26" HorizontalAlignment="Left" Click="ButtonSerializeDeserialize_Click">
                <TextBlock Text="Click to serialize what's above and deserialize it below" TextWrapping="Wrap" Width="150"/>
            </Button>
            <StackPanel x:Name="SerializationDestinationPanel" Orientation="Vertical" Margin="10,10,0,0">
                <TextBlock Text="Sample Serializable Class "/>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text=" - Text field: "/>
                    <TextBlock Text="{Binding TextField}" Margin="5,0,0,0"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text=" - Date field: "/>
                    <TextBlock Text="{Binding DateField}" Margin="5,0,0,0"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text=" - Guid field: "/>
                    <TextBlock Text="{Binding GuidField}" Margin="5,0,0,0"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text=" - Boolean field: "/>
                    <TextBlock Text="{Binding BooleanField}" Margin="5,0,0,0"/>
                </StackPanel>
            </StackPanel>
            <Button Content="[view/hide source code]" Margin="0,10,0,0" Foreground="#FF888888" HorizontalAlignment="Left" Click="ViewHideSourceCodeForXmlSerializerDemo_Click"/>
            <Border x:Name="SourceCodeForXmlSerializerDemo" Background="#FFE7E7E7" Margin="0,10,0,0" HorizontalAlignment="Left" Visibility="Collapsed">
                <StackPanel Orientation="Vertical" Margin="5">
                    <TextBlock FontSize="11" Margin="0,3,0,0" Foreground="#FF606060" Text="// Serialize:&#x0a;var serializer = new XmlSerializer(typeof(ClassToSerialize));&#x0a;var stream = new MemoryStream();&#x0a;serializer.Serialize(stream, _classToSerialize);&#x0a;stream.Seek(0, SeekOrigin.Begin);&#x0a;var reader = new StreamReader(stream);&#x0a;var serializedXml = reader.ReadToEnd();&#x0a;&#x0a;// Display the result of the serialization:&#x0a;MessageBox.Show(&quot;Result of the serialization:&quot; + Environment.NewLine + Environment.NewLine + serializedXml);&#x0a;&#x0a;// Deserialize:&#x0a;var deserializer = new XmlSerializer(typeof(ClassToSerialize));&#x0a;var memoryStream = new MemoryStream(Encoding.UTF8.GetBytes(serializedXml));&#x0a;var xmlReader = XmlReader.Create(memoryStream);&#x0a;ClassToSerialize deserializedObject = (ClassToSerialize)deserializer.Deserialize(xmlReader);&#x0a;&#x0a;// Display the result of the deserialization:&#x0a;SerializationDestinationPanel.DataContext = deserializedObject;"/>
                </StackPanel>
            </Border>
            <TextBlock Text="Linq" Margin="0,50,0,0" FontSize="26" Foreground="#FF414141"/>
            <TextBlock Text="The following Linq methods are supported: Any, AsEnumerable, Cast, Contains, Count, ElementAt, ElementAtOrDefault, Empty, First, FirstOrDefault, OfType, OrderBy, OrderByDescending, Range, Select, SelectMany, Sum, ToArray, ToList, and Where." Foreground="#FF808080" Margin="0,10,0,0" TextWrapping="Wrap" Width="220" FontSize="12" HorizontalAlignment="Left"/>
            <Button Content="Click to test a Linq query" Margin="0,10,0,0" Foreground="White" Background="#FFE44D26" HorizontalAlignment="Left" Click="ButtonToDemonstrateLinq_Click"/>
            <Button Content="[view/hide source code]" Margin="0,5,0,0" Foreground="#FF888888" HorizontalAlignment="Left" Click="ViewHideSourceCodeForLinqDemo_Click"/>
            <Border x:Name="SourceCodeForLinqDemo" Background="#FFE7E7E7" Margin="0,10,0,0" HorizontalAlignment="Left" Visibility="Collapsed">
                <StackPanel Orientation="Vertical" Margin="5">
                    <TextBlock Text="C# CODE:" FontSize="11" Foreground="#FFAD776B"/>
                    <TextBlock FontSize="11" Margin="0,3,0,0" Foreground="#FF606060" Text="var&#160;planets&#160;=&#160;Planet.GetListOfPlanets();&#x0a;var&#160;result&#160;=&#160;from&#160;p&#160;in&#160;planets&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;where&#160;p.Radius&#160;&gt;&#160;7000&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;orderby&#160;p.Name&#x0a;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;select&#160;p.Name;&#x0a;MessageBox.Show(string.Format(&quot;List&#160;of&#160;planets&#160;that&#160;have&#160;a&#160;radius&#160;greater&#160;than&#160;7000km&#160;sorted&#160;alphabetically:&#160;{0}&quot;,&#160;string.Join(&quot;,&#160;&quot;,&#160;result)));"/>
                </StackPanel>
            </Border>
            <TextBlock Text="Async/Await" Margin="0,50,0,0" FontSize="26" Foreground="#FF414141"/>
            <TextBlock x:Name="TaskBasedCounterTextBlock" Margin="10,10,0,0" FontSize="26" Foreground="#FFE44D26" VerticalAlignment="Top" Visibility="Collapsed"/>
            <Button Content="Start the task-based countdown sample" Margin="0,10,0,0" Foreground="White" Background="#FFE44D26" HorizontalAlignment="Left" Click="ButtonToDemonstrateAsyncAwait_Click"/>
            <TextBlock Text="Note: more async/await demos can be found in the WCF section." Foreground="#FF808080" Margin="0,10,0,0" TextWrapping="Wrap" Width="220" FontSize="12" HorizontalAlignment="Left"/>
            <Button Content="[view/hide source code]" Margin="0,10,0,0" Foreground="#FF888888" HorizontalAlignment="Left" Click="ViewHideSourceCodeForAsyncAwaitDemo_Click"/>
            <Border x:Name="SourceCodeForAsyncAwaitDemo" Background="#FFE7E7E7" Margin="0,10,0,0" HorizontalAlignment="Left" Visibility="Collapsed">
                <StackPanel Orientation="Vertical" Margin="5">
                    <TextBlock Text="XAML CODE:" FontSize="11" Foreground="#FFAD776B"/>
                    <TextBlock FontSize="11" Margin="0,3,0,0" Foreground="#FF606060" Text="&lt;StackPanel&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;TextBlock&#160;x:Name=&quot;TaskBasedCounterTextBlock&quot;&#160;Visibility=&quot;Collapsed&quot;/&gt;&#x0a;&#160;&#160;&#160;&#160;&lt;Button&#160;Content=&quot;Start&#160;the&#160;task-based&#160;countdown&#160;sample&quot;&#160;Click=&quot;ButtonToDemonstrateAsyncAwait_Click&quot;/&gt;&#x0a;&lt;/StackPanel&gt;"/>
                    <TextBlock Text="C# CODE:" Margin="0,5,0,0" FontSize="11" Foreground="#FFAD776B"/>
                    <TextBlock FontSize="11" Margin="0,3,0,0" Foreground="#FF606060" Text="async&#160;void&#160;ButtonToDemonstrateAsyncAwait_Click(object&#160;sender,&#160;RoutedEventArgs&#160;e)&#x0a;{&#x0a;&#160;&#160;&#160;&#160;var&#160;button&#160;=&#160;(Button)sender;&#x0a;&#160;&#160;&#160;&#160;button.Visibility&#160;=&#160;Visibility.Collapsed;&#x0a;&#160;&#160;&#160;&#160;TaskBasedCounterTextBlock.Visibility&#160;=&#160;Visibility.Visible;&#x0a;&#160;&#160;&#160;&#160;TaskBasedCounterTextBlock.Text&#160;=&#160;&quot;5&#160;seconds&#160;left&quot;;&#x0a;&#160;&#160;&#160;&#160;await&#160;Task.Delay(1000);&#x0a;&#160;&#160;&#160;&#160;TaskBasedCounterTextBlock.Text&#160;=&#160;&quot;4&#160;seconds&#160;left&quot;;&#x0a;&#160;&#160;&#160;&#160;await&#160;Task.Delay(1000);&#x0a;&#160;&#160;&#160;&#160;TaskBasedCounterTextBlock.Text&#160;=&#160;&quot;3&#160;seconds&#160;left&quot;;&#x0a;&#160;&#160;&#160;&#160;await&#160;Task.Delay(1000);&#x0a;&#160;&#160;&#160;&#160;TaskBasedCounterTextBlock.Text&#160;=&#160;&quot;2&#160;seconds&#160;left&quot;;&#x0a;&#160;&#160;&#160;&#160;await&#160;Task.Delay(1000);&#x0a;&#160;&#160;&#160;&#160;TaskBasedCounterTextBlock.Text&#160;=&#160;&quot;1&#160;second&#160;left&quot;;&#x0a;&#160;&#160;&#160;&#160;await&#160;Task.Delay(1000);&#x0a;&#160;&#160;&#160;&#160;TaskBasedCounterTextBlock.Text&#160;=&#160;&quot;Done!&quot;;&#x0a;&#160;&#160;&#160;&#160;button.Visibility&#160;=&#160;Visibility.Visible;&#x0a;}"/>
                </StackPanel>
            </Border>
            <Border x:Name="Footer" Height="120"/>
        </StackPanel>
    </Grid>
</Page>
